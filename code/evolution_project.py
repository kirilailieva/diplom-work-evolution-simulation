# –ü–æ–ø—Ä–∞–≤—è–º —Å–∏–Ω—Ç–∞–∫—Ç–∏—á–Ω–∞—Ç–∞ –≥—Ä–µ—à–∫–∞ –≤ —Ä–µ–¥–∞ –∑–∞ –∑–∞–ø–∏—Å –Ω–∞ CSV

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path

# –û–±—â–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
strategies = ['S1', 'S2', 'S3', 'S4', 'S5']
A = np.array([0.85, 0.43, 0.67, 0.85, 0.67])  # –®–∞–Ω—ä–Ω –µ–Ω—Ç—Ä–æ–ø–∏—è –∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏—Ç–µ
x_init = A / A.sum()  # –ù–∞—á–∞–ª–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

# üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Å–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π
def simulate_scenario(a_matrix, name, x0, iterations=20):
    x = x0.copy()
    history = [x.copy()]

    for _ in range(iterations):
        fitness = a_matrix @ x
        avg_fitness = np.dot(x, fitness)
        dx = x * (fitness - avg_fitness)
        x = x + dx
        x = x / x.sum()
        history.append(x.copy())

    df = pd.DataFrame(history, columns=strategies)
    df['iteration'] = range(len(history))

    output_dir = Path("output")
    output_dir.mkdir(exist_ok=True)
    df.to_csv(output_dir / f"{name}_results.csv", index=False, encoding='utf-8-sig')

    plt.figure(figsize=(10, 6))
    for strategy in strategies:
        plt.plot(df['iteration'], df[strategy], label=strategy)

    plt.xlabel("–ò—Ç–µ—Ä–∞—Ü–∏—è")
    plt.ylabel("–î—è–ª –æ—Ç –ø–æ–ø—É–ª–∞—Ü–∏—è—Ç–∞")
    plt.title(f"–°–∏—Ç—É–∞—Ü–∏—è 2: –ì—Ä—É–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç ‚Äì –†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(output_dir / f"{name}_graph.png")
    plt.close()

# ‚ñ∂Ô∏è –°–∏–º—É–ª–∞—Ü–∏—è –∑–∞ –°–∏—Ç—É–∞—Ü–∏—è 2: –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–µ–Ω –µ–∫–∏–ø–µ–Ω –ø—Ä–æ–µ–∫—Ç
a_project = np.array([
    [0.7, 0.4, 0.3, 0.5, 0.6],  # S1 ‚Äì –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç
    [0.4, 0.8, 0.2, 0.3, 0.6],  # S2 ‚Äì –ê–≥—Ä–µ—Å–∏–≤–Ω–æ—Å—Ç
    [0.3, 0.2, 0.7, 0.4, 0.3],  # S3 ‚Äì –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ—Å—Ç
    [0.5, 0.3, 0.4, 0.7, 0.5],  # S4 ‚Äì –ê–Ω–∞–ª–∏—Ç–∏—á–Ω–æ—Å—Ç
    [0.6, 0.6, 0.3, 0.5, 0.8],  # S5 ‚Äì –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç
])

# –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ —Å–∏–º—É–ª–∞—Ü–∏—è—Ç–∞
simulate_scenario(a_matrix=a_project, name="project", x0=x_init)
